#line 1 "_CMPL_Scanner.cc"

#line 3 "_CMPL_Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define cmpl_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer cmpl_create_buffer
#endif

#ifdef yy_delete_buffer
#define cmpl_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer cmpl_delete_buffer
#endif

#ifdef yy_scan_buffer
#define cmpl_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer cmpl_scan_buffer
#endif

#ifdef yy_scan_string
#define cmpl_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string cmpl_scan_string
#endif

#ifdef yy_scan_bytes
#define cmpl_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes cmpl_scan_bytes
#endif

#ifdef yy_init_buffer
#define cmpl_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer cmpl_init_buffer
#endif

#ifdef yy_flush_buffer
#define cmpl_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer cmpl_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define cmpl_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state cmpl_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define cmpl_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer cmpl_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define cmplpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state cmplpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define cmplpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state cmplpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define cmplensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack cmplensure_buffer_stack
#endif

#ifdef yylex
#define cmpllex_ALREADY_DEFINED
#else
#define yylex cmpllex
#endif

#ifdef yyrestart
#define cmplrestart_ALREADY_DEFINED
#else
#define yyrestart cmplrestart
#endif

#ifdef yylex_init
#define cmpllex_init_ALREADY_DEFINED
#else
#define yylex_init cmpllex_init
#endif

#ifdef yylex_init_extra
#define cmpllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra cmpllex_init_extra
#endif

#ifdef yylex_destroy
#define cmpllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy cmpllex_destroy
#endif

#ifdef yyget_debug
#define cmplget_debug_ALREADY_DEFINED
#else
#define yyget_debug cmplget_debug
#endif

#ifdef yyset_debug
#define cmplset_debug_ALREADY_DEFINED
#else
#define yyset_debug cmplset_debug
#endif

#ifdef yyget_extra
#define cmplget_extra_ALREADY_DEFINED
#else
#define yyget_extra cmplget_extra
#endif

#ifdef yyset_extra
#define cmplset_extra_ALREADY_DEFINED
#else
#define yyset_extra cmplset_extra
#endif

#ifdef yyget_in
#define cmplget_in_ALREADY_DEFINED
#else
#define yyget_in cmplget_in
#endif

#ifdef yyset_in
#define cmplset_in_ALREADY_DEFINED
#else
#define yyset_in cmplset_in
#endif

#ifdef yyget_out
#define cmplget_out_ALREADY_DEFINED
#else
#define yyget_out cmplget_out
#endif

#ifdef yyset_out
#define cmplset_out_ALREADY_DEFINED
#else
#define yyset_out cmplset_out
#endif

#ifdef yyget_leng
#define cmplget_leng_ALREADY_DEFINED
#else
#define yyget_leng cmplget_leng
#endif

#ifdef yyget_text
#define cmplget_text_ALREADY_DEFINED
#else
#define yyget_text cmplget_text
#endif

#ifdef yyget_lineno
#define cmplget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno cmplget_lineno
#endif

#ifdef yyset_lineno
#define cmplset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno cmplset_lineno
#endif

#ifdef yyget_column
#define cmplget_column_ALREADY_DEFINED
#else
#define yyget_column cmplget_column
#endif

#ifdef yyset_column
#define cmplset_column_ALREADY_DEFINED
#else
#define yyset_column cmplset_column
#endif

#ifdef yywrap
#define cmplwrap_ALREADY_DEFINED
#else
#define yywrap cmplwrap
#endif

/* %endif */

#ifdef yyget_lval
#define cmplget_lval_ALREADY_DEFINED
#else
#define yyget_lval cmplget_lval
#endif

#ifdef yyset_lval
#define cmplset_lval_ALREADY_DEFINED
#else
#define yyset_lval cmplset_lval
#endif

#ifdef yyget_lloc
#define cmplget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc cmplget_lloc
#endif

#ifdef yyset_lloc
#define cmplset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc cmplset_lloc
#endif

#ifdef yyalloc
#define cmplalloc_ALREADY_DEFINED
#else
#define yyalloc cmplalloc
#endif

#ifdef yyrealloc
#define cmplrealloc_ALREADY_DEFINED
#else
#define yyrealloc cmplrealloc
#endif

#ifdef yyfree
#define cmplfree_ALREADY_DEFINED
#else
#define yyfree cmplfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define cmplwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[618] =
    {   0,
        7,    7,   92,   91,    8,   91,    9,   91,   10,   91,
       10,   91,   90,   91,    8,   90,   91,   85,   90,   91,
       90,   91,   10,   90,   91,   48,   90,   91,16431,   64,
       90,   91,   90,   91,   90,   91,   90,   91,   52,   90,
       91,   90,   91,   57,   58,   90,   91,16439,16440,   74,
       90,   91,   89,   90,   91,   79,   90,   91,   75,   90,
       91,   80,   90,   91,   90,   91,   46,   48,   90,   91,
    16431,   49,   90,   91,   90,   91,   48,   90,   91,16431,
       48,   90,   91,16431,   48,   90,   91,16431,   48,   90,
       91,16431,   48,   90,   91,16431,   48,   90,   91,16431,

       48,   90,   91,16431,   48,   90,   91,16431,   48,   90,
       91,16431,   48,   90,   91,16431,   48,   90,   91,16431,
       60,   90,   91,   62,   90,   91,   61,   90,   91,   10,
       90,   91,   65,   91,    8,   65,   91,   10,   65,   91,
       52,   65,   91,   10,   65,   91,   62,   65,   91,   61,
       65,   91,   51,   91,    8,   51,   91,   50,   51,   91,
       10,   51,   91,   46,   50,   51,   91,   49,   51,   91,
       50,   51,   91,   50,   51,   91,   50,   51,   91,   50,
       51,   91,   50,   51,   91,   50,   51,   91,   50,   51,
       91,   50,   51,   91,   50,   51,   91,   50,   51,   91,

       50,   51,   91,   10,   51,   91,   53,   90,   91,   90,
       91,   90,   91,   90,   91,    7,   91,    7,    8,   91,
        6,    9,   91,    7,   10,   91,    7,   91,    7,   91,
        7,   91,    7,   91,    7,   10,   91,    8,    9,   10,
       10,   78,   59, 8239,   48,16431,   83,   63,   70,   87,
       72,   68,   73,   69,   88,   86,   58,16440,   71, 8247,
     8248,   57,   58,16439,16440, 8247, 8248,   66,   81,   77,
       76,   82,   48,   45, 8239,   54,   48,16431,   48,16431,
       48,16431,   48,16431,   48,16431,   42,   48,16431,   48,
    16431,   48,16431,   44,   48,16431,   48,16431,   48,16431,

       48,16431,   48,16431,   84,   45,   42,   44,   53,   53,
        7,    7,    8,    6,    9,    7,   10,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   59, 8248, 8248,
       58,16440,   67,   48,   54,   48,16431,   48,16431,   48,
    16431,   48,16431,   48,16431,   41, 8239,   48,16431,   48,
    16431,   20,   48,16431,   43, 8239,   48,16431,   48,16431,
       48,16431,   30,   48,16431,   48,16431,   48,16431,   41,
       20,   43,   30,    7,    7,    7,    7,    7,   10,    7,
       10,    7,   10,    7,   10,   10,   10,   10,   10,   48,
    16431,   48,16431,   48,16431,   48,16431,   48,16431,   48,

    16431,   48,16431,   48,16431,   19, 8239,   48,16431,   48,
    16431,   48,16431,   29, 8239,   48,16431,   48,16431,   19,
       29,    5,    7,    7,    7,    7,    7,   10,    7,   10,
        7,   10,    7,   10,   10,   10,   10,   10,   48,16431,
       32,   48,16431,   18,   48,16431,   48,16431,   48,16431,
       48,16431,   48,16431,   16,   48,16431,   48,16431,   48,
    16431,   48,16431,   48,16431,   48,16431,   32,   18,   16,
        5,    7,    7,    4,    7,    7,    7,   10,    7,   10,
        7,   10,    7,   10,    1,   10,   10,   10,   24,   48,
    16431,   31, 8239,   17, 8239,   48,16431,   48,16431,   22,

       48,16431,   48,16431,   15, 8239,   48,16431,   48,16431,
       12,   48,16431,   36,   48,16431,   38,   48,16431,   24,
       31,   17,   22,   15,   12,   36,   38,    7,    4,    7,
        7,    1,    7,   10,    7,   10,    7,   10,    1,   10,
       10,   10,   23, 8239,   48,16431,   26,   48,16431,   21,
     8239,   28,   48,16431,   40,   48,16431,   14,   48,16431,
       11, 8239,   35, 8239,   37, 8239,   23,   26,   21,   28,
       40,   14,   11,   35,   37,    2,    7,    7,    1,    7,
       10,    7,   10,    7,   10,   10,   34,   48,16431,   25,
     8239,   27, 8239,   39, 8239,   13, 8239,   34,   25,   27,

       39,   13,    2,    7,    7,    7,   10,   10,   33, 8239,
       33,    3,    7,    7,   10,    3,    7
    } ;

static const flex_int16_t yy_accept[428] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    4,    5,    7,
        9,   11,   13,   15,   18,   21,   23,   26,   30,   33,
       35,   37,   39,   42,   44,   50,   53,   56,   59,   62,
       65,   67,   72,   75,   77,   81,   85,   89,   93,   97,
      101,  105,  109,  113,  117,  121,  124,  127,  130,  133,
      135,  138,  141,  144,  147,  150,  153,  155,  158,  161,
      164,  168,  171,  174,  177,  180,  183,  186,  189,  192,
      195,  198,  201,  204,  207,  210,  212,  214,  216,  218,
      221,  224,  227,  229,  231,  233,  235,  238,  239,  240,

      241,  242,  243,  243,  244,  244,  244,  245,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  256,  257,  259,
      260,  260,  262,  262,  266,  268,  268,  269,  270,  271,
      272,  273,  274,  274,  276,  277,  279,  281,  283,  285,
      287,  290,  292,  294,  297,  299,  301,  303,  305,  306,
      306,  307,  307,  307,  307,  307,  307,  308,  308,  308,
      309,  309,  309,  309,  309,  310,  311,  312,  314,  316,
      318,  319,  320,  321,  322,  324,  325,  326,  327,  328,
      329,  329,  330,  331,  331,  333,  334,  335,  336,  338,
      340,  342,  344,  346,  346,  348,  350,  352,  355,  355,

      357,  359,  361,  363,  366,  368,  370,  370,  370,  370,
      370,  370,  370,  371,  371,  371,  372,  372,  373,  373,
      373,  373,  374,  374,  374,  375,  376,  377,  378,  380,
      382,  384,  386,  387,  388,  389,  390,  392,  394,  396,
      398,  400,  402,  404,  406,  406,  408,  410,  412,  414,
      414,  416,  418,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  421,  422,  422,
      422,  424,  425,  426,  427,  429,  431,  433,  435,  436,
      437,  438,  439,  441,  444,  447,  449,  451,  453,  455,
      458,  460,  462,  464,  466,  468,  468,  469,  470,  470,

      470,  470,  470,  471,  471,  471,  471,  471,  471,  473,
      474,  476,  477,  479,  481,  483,  485,  487,  488,  489,
      492,  492,  494,  494,  496,  498,  500,  503,  505,  505,
      507,  509,  511,  514,  517,  520,  521,  521,  522,  522,
      523,  523,  523,  524,  524,  524,  525,  525,  525,  526,
      527,  528,  529,  531,  532,  535,  537,  539,  541,  542,
      543,  543,  545,  547,  550,  550,  552,  555,  558,  561,
      561,  563,  563,  565,  565,  567,  567,  568,  568,  569,
      569,  570,  571,  572,  573,  573,  574,  574,  575,  575,
      576,  578,  579,  582,  584,  586,  587,  590,  590,  592,

      592,  594,  594,  596,  596,  598,  599,  599,  600,  600,
      601,  601,  602,  602,  603,  605,  606,  608,  609,  609,
      611,  611,  612,  614,  616,  618,  618
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,    1,   10,
        1,   11,   12,    1,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,   22,   23,   23,   24,   25,   26,   23,
       23,   23,   23,   23,   23,   27,   23,   23,   23,   28,
       23,   23,   29,   30,   23,   23,   23,   23,   23,   23,
       10,   31,   32,    1,   23,   33,   34,   35,   36,   37,

       38,   39,   23,   23,   40,   23,   41,   42,   23,   43,
       44,   45,   23,   46,   47,   48,   49,   50,   51,   52,
       23,   23,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    5,
        1,    1,    1,    6,    1,    7,    1,    1,    1,    1,
        1,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    1,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    5,    1,    1
    } ;

static const flex_int16_t yy_base[449] =
    {   0,
        0,    2,    9, 1029,    0, 1028,   63,   65,   71,   73,
      128, 1023,  183, 1022,  237,  283, 1026, 1230, 1022, 1020,
        0, 1007, 1230, 1011,  987,   63,    0,  239,   72,   62,
       76,   77,   75,  981,  243,   75, 1230,   79,  978,  971,
        0,  248, 1230,    0,  268,  285,  273,  294,  325,  338,
      341,  350,  353,   62,   64, 1230,  935, 1230,  979, 1230,
      983,    0, 1230,  976, 1230, 1230, 1230,  977, 1230,    0,
      362, 1230,  927,  927,  926,  931,  915,  920,  913,  916,
       47,   58,  907,  935,    0,  923,  920,    0,    0,  928,
      926,    0,  883,  885,  878,  869,  907,  911,  908,    0,

      371, 1230,  249, 1230,  262,  366, 1230,   66, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,  320, 1230,
      407, 1230,  894,  422,  101,  881, 1230, 1230, 1230, 1230,
     1230,    0,  380, 1230,    0,   76,  267,  217,   70,  263,
      425,  366,  328,  437,  334,  347,  407,  404, 1230,  452,
     1230,  851,  851,  843,  843,  829,  464,  839,  821,  467,
      834,  823,  827,  255,    0,    0,    0,  858,  855,    0,
      815,  816,  811,  811,  455,  798,  795,  792,  778,  285,
      428, 1230,  108,  806,  483, 1230,    0,    0,  437,  454,
      462,  472,  457,  519, 1230,  467,  473,  522,  531, 1230,

      492,  497,  498,  546,  507,  412,  781,  782,   71,  767,
      769,  555, 1230,  756,  768,  558,  567, 1230,  763,  739,
      746,  576,  748,  733,  759,  240,  737,  726,  719,  722,
      713,  702,  707,  707,  699,  686,  358,  418,  528,  542,
      551,  527,  552,  554,  599, 1230,  548,  571,  567,  612,
     1230,  584,  573,  661,  665,  656,  663,  660,  645,  650,
      638,  622, 1230,  626,  628,  619,  631, 1230,  623,  602,
        0,  595,  620,  588,  585,  565,  552,  555,  566,  272,
      526,  517,  592,  640,  643,  612,  582,  617,  615,  664,
      631,  625,  640,  639,  649,  507,  679,  695,  511,  506,

      508,  508,  698,  501,  480,  491,  468,  455,    0,  458,
        0,  220,  472,  291,  443,  427,    0,  428,  415,  708,
      711, 1230,  720, 1230,  670,  687,  725,  692,  737, 1230,
      706,  698,  752,  755,  764,  767,  777, 1230,  781, 1230,
      396,  384,  790,  374,  793, 1230,  377,  363,  808,  811,
      821,  372,    0,  331,    0,  318,  313,    0,  323,  389,
      825, 1230,  760,  834,  837, 1230,  846,  849,  863,  866,
     1230,  878, 1230,  881, 1230,  890, 1230,  312,  893,  902,
     1230,  905,  918,  922,  934, 1230,  937, 1230,  946, 1230,
        0,  302,    0,  303,  392,  293,  949,  958, 1230,  962,

     1230,  974, 1230,  978, 1230,  990,  993, 1230, 1002, 1230,
     1006, 1230, 1015, 1230,    0,  317,  210,  206, 1018, 1230,
     1030, 1230,    0,   24,    0, 1230, 1083, 1091, 1099, 1107,
     1115, 1122, 1129, 1134, 1139, 1141, 1146, 1154, 1162, 1169,
     1171, 1173, 1181, 1189, 1197, 1205, 1213, 1221
    } ;

static const flex_int16_t yy_def[449] =
    {   0,
      427,  427,  426,    3,    3,    3,  428,  428,  428,  428,
      426,   11,  426,   13,  429,  429,  426,  426,  426,  426,
      430,  430,  426,  426,  426,  431,  430,  432,  426,  426,
      426,  426,  426,  426,  433,  426,  426,  426,  426,  426,
      434,  432,  426,  435,  432,  432,  432,  432,  432,  432,
      432,  432,  432,   53,   53,  426,  426,  426,  430,  426,
      426,  430,  426,  430,  426,  426,  426,  426,  426,  430,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  430,  436,  426,  426,  437,  438,  438,
      426,  439,  438,  438,  438,  438,  439,  426,  426,  430,

      430,  426,  431,  426,  431,  426,  426,   53,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  440,  426,
      433,  426,  426,  433,  426,  426,  426,  426,  426,  426,
      426,  441,  426,  426,  442,   53,   53,   53,   53,   53,
      432,   53,   53,  432,   53,   53,   53,   53,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  436,  436,  438,  438,  426,  439,
      438,  438,  438,  438,  439,  430,  430,  430,  430,  431,
      440,  426,  426,  426,  440,  426,  441,  442,   53,   53,
       53,   53,   53,  426,  426,   53,   53,  432,  426,  426,

       53,   53,   53,  432,   53,   53,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  438,  438,  438,  438,  439,  439,
      439,  439,  430,  430,  430,  430,   53,   53,   53,   53,
       53,   53,   53,   53,  426,  426,   53,   53,   53,  426,
      426,   53,   53,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      443,  438,  438,  438,  439,  439,  439,  439,  430,  430,
      430,  430,   53,  432,  432,   53,   53,   53,   53,  432,
       53,   53,   53,   53,   53,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  443,  438,
      444,  438,  439,  439,  439,  439,  445,  430,  430,  432,
      426,  426,  426,  426,   53,   53,  432,   53,  426,  426,
       53,   53,  432,  432,  432,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  438,  444,  438,  446,  439,  439,  445,  430,  430,
      426,  426,   53,  432,  426,  426,  432,  432,  432,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      447,  438,  446,  439,  439,  430,  432,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  447,  438,  439,  430,  426,  426,
      426,  426,  448,  439,  448,    0,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426
    } ;

static const flex_int16_t yy_nxt[1286] =
    {   0,
      426,   19,   20,   19,   20,  426,   21,  426,   22,   23,
       24,   20,   23,   25,   26,   27,   28,   29,   23,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   28,   28,   28,   28,   28,   28,   28,   42,   41,
       43,   44,   45,   46,   47,   48,   49,   28,   50,   28,
       51,   52,   53,   54,   55,   28,   28,   28,   28,   28,
       28,   56,   57,   58,   61,   20,   61,   20,  104,   62,
      313,   64,   61,   20,   61,   20,   63,   62,   63,   64,
      109,  111,  112,  110,   63,  160,   63,  113,  118,  115,
      119,  126,  161,  105,  127,  114,  116,  117,  128,  129,

      108,  148,  108,  162,  108,  192,  163,  146,  108,  108,
      147,  108,  184,  184,  108,  108,  185,  256,  257,  184,
      184,  108,  189,  185,   65,   66,   65,   66,   67,   68,
       20,   67,   67,   69,   70,   69,   67,   69,   67,   67,
       67,   67,   67,   69,   67,   67,   67,   67,   67,   67,
       69,   69,   69,   69,   69,   69,   69,   71,   67,   72,
       67,   73,   74,   75,   76,   77,   69,   78,   69,   79,
       80,   81,   82,   83,   69,   69,   69,   69,   69,   69,
       69,   67,   67,   23,   24,   20,   23,   23,   23,   27,
       85,   23,   23,   23,   86,   87,   23,   23,   23,   23,

       37,   23,   23,   23,   23,   85,   85,   85,   85,   85,
       85,   85,   85,   88,   23,   23,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   23,   23,   58,   90,   91,
      106,  106,  106,   92,  121,  121,  121,  354,  107,  133,
      133,  133,  279,  424,  104,  108,  123,  134,  124,  191,
       93,   94,  108,   95,  354,   96,  272,  180,  125,  106,
      106,  106,   93,   94,  106,  106,  106,  107,   95,  105,
      125,  272,  107,   96,   90,   91,  106,  106,  106,   97,
      104,  107,  105,  222,  107,  106,  106,  106,  318,  223,

      134,  108,  224,  107,  190,  108,   93,   94,  108,   95,
      193,   96,  108,  318,  136,  105,  138,  356,   93,   94,
      107,  181,  181,  181,   95,  107,  106,  106,  106,   96,
      137,  139,  356,  423,  107,  119,  418,  107,  313,  106,
      106,  106,  106,  106,  106,  183,  107,  107,  416,  406,
      107,  106,  106,  106,  106,  106,  106,  183,  279,  107,
      395,  394,  107,  150,  150,  150,  108,  106,  106,  106,
      201,  151,  108,  108,  392,  107,  140,  107,  198,  108,
      141,  133,  133,  133,  142,  108,  202,  143,  391,  134,
      107,  144,  108,  107,  176,  177,  108,  178,  145,  179,

      384,  197,  107,  283,  108,  107,  176,  177,  121,  121,
      121,  108,  178,  383,  151,  382,  396,  179,  107,  417,
      426,  379,  426,  121,  121,  121,  194,  194,  194,  181,
      181,  181,  134,  396,  195,  123,  417,  124,  199,  199,
      199,  203,  204,  426,  378,  108,  200,  125,  205,  108,
      108,  206,  108,  150,  150,  150,  108,  108,  284,  125,
      253,  151,  360,  108,  196,  212,  212,  212,  217,  217,
      217,  359,  357,  213,  237,  108,  218,  195,  229,  230,
      313,  231,  108,  232,  181,  181,  181,  238,  355,  200,
      229,  230,  108,  352,  242,  108,  231,  351,  185,  108,

      108,  232,  108,  214,  151,  108,  244,  108,  239,  240,
      108,  108,  108,  241,  243,  350,  213,  108,  108,  218,
      194,  194,  194,  245,  245,  245,  349,  348,  195,  247,
      108,  246,  199,  199,  199,  108,  108,  108,  347,  249,
      200,  344,  108,  108,  252,  108,  248,  250,  250,  250,
      343,  342,  108,  341,  336,  251,  212,  212,  212,  262,
      262,  262,  319,  279,  213,  108,  108,  263,  217,  217,
      217,  195,  288,  108,  246,  285,  218,  267,  267,  267,
      108,  286,  317,  200,  287,  268,  108,  108,  316,  108,
      108,  289,  108,  291,  315,  290,  108,  108,  251,  108,

      245,  245,  245,  314,  292,  108,  293,  213,  246,  108,
      263,  108,  108,  250,  250,  250,  108,  294,  295,  218,
      108,  251,  108,  262,  262,  262,  313,  326,  268,  108,
      108,  263,  267,  267,  267,  312,  311,  108,  310,  320,
      268,  321,  321,  321,  323,  323,  323,  308,  328,  322,
      108,  246,  324,  108,  325,  108,  307,  108,  306,  327,
      108,  305,  108,  108,  251,  329,  329,  329,  331,  108,
      108,  304,  332,  330,  263,  333,  108,  108,  108,  303,
      337,  337,  337,  268,  108,  108,  334,  108,  338,  302,
      301,  335,  322,  300,  108,  324,  339,  339,  339,  345,

      345,  345,  299,  298,  340,  297,  296,  346,  108,  361,
      361,  361,  321,  321,  321,  108,  330,  362,  363,  282,
      322,  323,  323,  323,  364,  108,  365,  365,  365,  324,
      108,  338,  108,  367,  366,  369,  108,  108,  329,  329,
      329,  281,  368,  108,  108,  280,  330,  340,  279,  278,
      346,  108,  277,  370,  370,  370,  372,  372,  372,  276,
      362,  371,  275,  322,  373,  374,  374,  374,  376,  376,
      376,  274,  324,  375,  273,  271,  377,  366,  337,  337,
      337,  270,  339,  339,  339,  269,  338,  266,  265,  330,
      340,  380,  380,  380,  345,  345,  345,  397,  108,  381,

      264,  261,  346,  260,  371,  108,  259,  373,  258,  385,
      385,  385,  387,  387,  387,  255,  375,  386,  254,  377,
      388,  185,  389,  389,  389,  236,  361,  361,  361,  338,
      390,  235,  234,  340,  362,  398,  398,  398,  365,  365,
      365,  233,  381,  399,  228,  346,  366,  400,  400,  400,
      402,  402,  402,  227,  226,  401,  225,  169,  403,  168,
      386,  221,  220,  388,  404,  404,  404,  370,  370,  370,
      219,  216,  405,  390,  215,  371,  211,  362,  210,  372,
      372,  372,  374,  374,  374,  209,  399,  373,  208,  366,
      375,  376,  376,  376,  407,  407,  407,  207,  401,  377,

      186,  403,  408,  380,  380,  380,  409,  409,  409,  119,
       99,  381,   98,  175,  410,  405,  174,  173,  371,  411,
      411,  411,  172,  413,  413,  413,  171,  412,  169,  168,
      373,  414,  115,  375,  113,  385,  385,  385,  387,  387,
      387,  101,  377,  386,  164,  408,  388,  389,  389,  389,
      419,  419,  419,  159,  381,  390,  158,  410,  420,  398,
      398,  398,  157,  400,  400,  400,  156,  399,  155,  154,
      412,  401,  153,  152,  414,  402,  402,  402,   98,  404,
      404,  404,  101,  403,   98,  101,  386,  405,  149,  388,
      131,  421,  421,  421,  407,  407,  407,  130,  390,  422,

      120,  420,  408,  409,  409,  409,  102,  411,  411,  411,
      399,  410,   98,  101,  401,  412,  413,  413,  413,  419,
      419,  419,   99,   98,  414,  426,  403,  420,   59,   84,
      405,  421,  421,  421,   59,   59,  426,  426,  426,  422,
      426,  426,  422,  426,  426,  408,  426,  426,  426,  426,
      426,  426,  426,  426,  410,  426,  426,  426,  412,  426,
      426,  426,  426,  426,  426,  426,  426,  414,  426,  426,
      420,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  422,   18,   18,   18,   18,   18,   18,   18,
       18,   60,   60,   60,   60,   60,   60,   60,   60,   89,

       89,   89,   89,   89,   89,   89,   89,  100,  100,  426,
      100,  100,  100,  100,  100,  103,  103,  426,  103,  103,
      103,  103,  103,  108,  108,  426,  108,  426,  108,  108,
      122,  122,  122,  426,  122,  122,  122,  132,  426,  426,
      426,  132,  135,  426,  426,  426,  135,  165,  165,  166,
      426,  426,  426,  166,  167,  167,  426,  167,  167,  167,
      167,  167,  170,  170,  426,  170,  170,  170,  170,  170,
      182,  182,  182,  426,  426,  182,  182,  187,  187,  188,
      188,  309,  309,  426,  309,  309,  309,  309,  309,  353,
      353,  426,  353,  353,  353,  353,  353,  358,  358,  426,

      358,  358,  358,  358,  358,  393,  393,  426,  393,  393,
      393,  393,  393,  415,  415,  426,  415,  415,  415,  415,
      415,  425,  425,  426,  425,  425,  425,  425,  425,   17,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426
    } ;

static const flex_int16_t yy_chk[1286] =
    {   0,
        0,    1,    1,    2,    2,    0,    1,    0,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   26,    7,
      424,    8,    9,    9,   10,   10,    7,    9,    8,   10,
       29,   30,   30,   29,    9,   81,   10,   31,   33,   32,
       33,   36,   81,   26,   36,   31,   32,   32,   38,   38,

       54,   55,   55,   82,  108,  139,   82,   54,  139,   55,
       54,  108,  125,  125,  136,  139,  125,  209,  209,  183,
      183,  136,  136,  183,    9,    9,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   15,
       28,   28,   28,   15,   35,   35,   35,  312,   28,   42,
       42,   42,  418,  417,  103,  138,   35,   42,   35,  138,
       15,   15,  138,   15,  312,   15,  226,  105,   35,   45,
       45,   45,   15,   15,   47,   47,   47,   45,   15,  103,
       35,  226,   47,   15,   16,   16,   46,   46,   46,   16,
      180,   28,  105,  164,   46,   48,   48,   48,  280,  164,

       42,  140,  164,   48,  137,  137,   16,   16,  140,   16,
      140,   16,  137,  280,   45,  180,   47,  314,   16,   16,
       45,  119,  119,  119,   16,   47,   49,   49,   49,   16,
       46,   48,  314,  416,   49,  119,  396,   46,  394,   50,
       50,   50,   51,   51,   51,  119,   48,   50,  392,  378,
       51,   52,   52,   52,   53,   53,   53,  119,  359,   52,
      357,  356,   53,   71,   71,   71,  143,  106,  106,  106,
      145,   71,  145,  143,  354,  106,   49,   49,  143,  145,
       50,  133,  133,  133,   51,  146,  146,   52,  352,  133,
       50,   53,  146,   51,  101,  101,  237,  101,   53,  101,

      348,  142,   52,  237,  142,   53,  101,  101,  121,  121,
      121,  142,  101,  347,   71,  344,  360,  101,  106,  395,
      121,  342,  121,  124,  124,  124,  141,  141,  141,  181,
      181,  181,  133,  360,  141,  124,  395,  124,  144,  144,
      144,  147,  148,  181,  341,  147,  144,  124,  148,  148,
      206,  148,  147,  150,  150,  150,  238,  206,  238,  124,
      206,  150,  319,  238,  141,  157,  157,  157,  160,  160,
      160,  318,  316,  157,  189,  189,  160,  141,  175,  175,
      315,  175,  189,  175,  185,  185,  185,  190,  313,  144,
      175,  175,  190,  310,  193,  193,  175,  308,  185,  190,

      191,  175,  193,  157,  150,  196,  197,  191,  191,  191,
      192,  197,  196,  192,  196,  307,  157,  192,  197,  160,
      194,  194,  194,  198,  198,  198,  306,  305,  194,  201,
      201,  198,  199,  199,  199,  202,  203,  201,  304,  203,
      199,  302,  202,  203,  205,  205,  202,  204,  204,  204,
      301,  300,  205,  299,  296,  204,  212,  212,  212,  216,
      216,  216,  282,  281,  212,  242,  239,  216,  217,  217,
      217,  194,  242,  239,  198,  239,  217,  222,  222,  222,
      240,  240,  279,  199,  241,  222,  247,  240,  278,  241,
      243,  243,  244,  247,  277,  244,  241,  243,  204,  244,

      245,  245,  245,  276,  248,  249,  249,  212,  245,  248,
      216,  253,  249,  250,  250,  250,  248,  252,  253,  217,
      287,  250,  252,  262,  262,  262,  275,  287,  222,  252,
      283,  262,  267,  267,  267,  274,  273,  283,  272,  283,
      267,  284,  284,  284,  285,  285,  285,  270,  289,  284,
      286,  245,  285,  289,  286,  288,  269,  286,  266,  288,
      289,  265,  288,  292,  250,  290,  290,  290,  291,  291,
      292,  264,  292,  290,  262,  293,  291,  294,  293,  261,
      297,  297,  297,  267,  294,  293,  294,  295,  297,  260,
      259,  295,  284,  258,  295,  285,  298,  298,  298,  303,

      303,  303,  257,  256,  298,  255,  254,  303,  325,  320,
      320,  320,  321,  321,  321,  325,  290,  320,  325,  236,
      321,  323,  323,  323,  326,  326,  327,  327,  327,  323,
      328,  297,  326,  328,  327,  332,  332,  328,  329,  329,
      329,  235,  331,  332,  331,  234,  329,  298,  233,  232,
      303,  331,  231,  333,  333,  333,  334,  334,  334,  230,
      320,  333,  229,  321,  334,  335,  335,  335,  336,  336,
      336,  228,  323,  335,  227,  225,  336,  327,  337,  337,
      337,  224,  339,  339,  339,  223,  337,  221,  220,  329,
      339,  343,  343,  343,  345,  345,  345,  363,  363,  343,

      219,  215,  345,  214,  333,  363,  211,  334,  210,  349,
      349,  349,  350,  350,  350,  208,  335,  349,  207,  336,
      350,  184,  351,  351,  351,  179,  361,  361,  361,  337,
      351,  178,  177,  339,  361,  364,  364,  364,  365,  365,
      365,  176,  343,  364,  174,  345,  365,  367,  367,  367,
      368,  368,  368,  173,  172,  367,  171,  169,  368,  168,
      349,  163,  162,  350,  369,  369,  369,  370,  370,  370,
      161,  159,  369,  351,  158,  370,  156,  361,  155,  372,
      372,  372,  374,  374,  374,  154,  364,  372,  153,  365,
      374,  376,  376,  376,  379,  379,  379,  152,  367,  376,

      126,  368,  379,  380,  380,  380,  382,  382,  382,  123,
       99,  380,   98,   97,  382,  369,   96,   95,  370,  383,
      383,  383,   94,  384,  384,  384,   93,  383,   91,   90,
      372,  384,   87,  374,   86,  385,  385,  385,  387,  387,
      387,   84,  376,  385,   83,  379,  387,  389,  389,  389,
      397,  397,  397,   80,  380,  389,   79,  382,  397,  398,
      398,  398,   78,  400,  400,  400,   77,  398,   76,   75,
      383,  400,   74,   73,  384,  402,  402,  402,   68,  404,
      404,  404,   64,  402,   61,   59,  385,  404,   57,  387,
       40,  406,  406,  406,  407,  407,  407,   39,  389,  406,

       34,  397,  407,  409,  409,  409,   25,  411,  411,  411,
      398,  409,   24,   22,  400,  411,  413,  413,  413,  419,
      419,  419,   20,   19,  413,   17,  402,  419,   14,   12,
      404,  421,  421,  421,    6,    4,    0,    0,    0,  421,
        0,    0,  406,    0,    0,  407,    0,    0,    0,    0,
        0,    0,    0,    0,  409,    0,    0,    0,  411,    0,
        0,    0,    0,    0,    0,    0,    0,  413,    0,    0,
      419,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  421,  427,  427,  427,  427,  427,  427,  427,
      427,  428,  428,  428,  428,  428,  428,  428,  428,  429,

      429,  429,  429,  429,  429,  429,  429,  430,  430,    0,
      430,  430,  430,  430,  430,  431,  431,    0,  431,  431,
      431,  431,  431,  432,  432,    0,  432,    0,  432,  432,
      433,  433,  433,    0,  433,  433,  433,  434,    0,    0,
        0,  434,  435,    0,    0,    0,  435,  436,  436,  437,
        0,    0,    0,  437,  438,  438,    0,  438,  438,  438,
      438,  438,  439,  439,    0,  439,  439,  439,  439,  439,
      440,  440,  440,    0,    0,  440,  440,  441,  441,  442,
      442,  443,  443,    0,  443,  443,  443,  443,  443,  444,
      444,    0,  444,  444,  444,  444,  444,  445,  445,    0,

      445,  445,  445,  445,  445,  446,  446,    0,  446,  446,
      446,  446,  446,  447,  447,    0,  447,  447,  447,  447,
      447,  448,  448,    0,  448,  448,  448,  448,  448,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static const flex_int16_t yy_rule_linenum[91] =
    {   0,
       96,   98,   99,  100,  101,  103,  104,  108,  109,  112,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      150,  151,  152,  153,  154,  155,  158,  162,  175,  176,
      178,  182,  183,  190,  193,  194,  196,  197,  199,  202,
      205,  211,  213,  214,  216,  221,  222,  223,  224,  225,
      226,  228,  229,  231,  234,  235,  236,  237,  238,  239,
      240,  241,  243,  244,  245,  247,  248,  250,  252,  255
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CMPL_Scanner.l"
/***********************************************************************
 *  This code is part of CMPL
 *
 *  Copyright (C) 2007, 2008, 2009, 2010, 2011 Thomas Schleiff - Halle(Saale), 
 *  Germany and Mike Steglich - Technical University of Applied Sciences
 *  Wildau, Germany 
 *
 *  Coliop3 and CMPL are projects of the Technical University of 
 *  Applied Sciences Wildau and the Institute for Operations Research 
 *  and Business Management at the Martin Luther University 
 *  Halle-Wittenberg.
 *  Please visit the project homepage <www.coliop.org>
 * 
 *  CMPL is free software; you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 3 of the License, or 
 *  (at your option) any later version.
 * 
 *  CMPL is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 *  License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 ***********************************************************************/
#line 31 "CMPL_Scanner.l"
#include "CompilerContext.hh"


/* By default yylex returns int, we use token_type.
Unfortunately yyterminate by default returns 0, which is
not of token_type.  */
#define yyterminate() return token::END

// scanner uses YYSTYPE and YYLTYPE, but parser yy::Cmpl_Parser::semantic_type and yy::Cmpl_Parser::location_type
#define YYSTYPE cmpl::CMPL_Parser::semantic_type
#define YYLTYPE cmpl::CMPL_Parser::location_type

// handle locations
#define YY_USER_ACTION  yylloc->step(); yylloc->columns(yyleng);

// cmpl main object
#define glvar PARSE_CONTEXT.glvar

typedef cmpl::CMPL_Parser::token token;
int prevSC;
#line 1332 "_CMPL_Scanner.cc"
/*%option ansi-prototypes*/
#line 63 "CMPL_Scanner.l"
	/* Scanner states */
		/* standard cmpl state */

		/* scan cmpl input, possible assign modifier or directive */

		/* after end of a codeblock: insert semicolon */

		/* after end of a codeblock: insert semicolon but not if '}' follow */

		/* after closing ']': possible array cast */

		/* cmpl subsymbol expected */

		/* position mark */

#line 1350 "_CMPL_Scanner.cc"

#define INITIAL 0
#define SC_Cmpl 1
#define SC_CmplAM 2
#define SC_CmplCBEndA 3
#define SC_CmplCBEndB 4
#define SC_ArrCast 5
#define SC_Subsym 6
#define SC_Position 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 85 "CMPL_Scanner.l"


	/* set initial scanner state */
	{
		if (YY_START == 0) {
			BEGIN(SC_CmplAM);
		}
	}


    /* position marks */
#line 1741 "_CMPL_Scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 427 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1230 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 91 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 91 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 92 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 96 "CMPL_Scanner.l"
{ PARSE_CONTEXT.setScanModeRestore(YY_START); BEGIN(SC_Position); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 98 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseDefLocPM(yylloc, yytext+7); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseStartPosPM(yylloc, yytext+9); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 100 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseLinePM(yylloc, yytext+5); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseColPM(yylloc, yytext+4); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 103 "CMPL_Scanner.l"
{ BEGIN(PARSE_CONTEXT.scanModeRestore()); yylloc->lines(yyleng-1); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "CMPL_Scanner.l"
{ PARSE_CONTEXT.outErrorPositionMark(yylloc, yytext); }
	YY_BREAK
/* Whitespaces */
case 8:
YY_RULE_SETUP
#line 108 "CMPL_Scanner.l"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 109 "CMPL_Scanner.l"
{ yylloc->lines(yyleng); }
	YY_BREAK
/* comments (only line comments starting with '#' are allowed here (the precompiler must handle c comments and c++ comments) */
case 10:
YY_RULE_SETUP
#line 112 "CMPL_Scanner.l"
;
	YY_BREAK
case YY_STATE_EOF(SC_CmplCBEndA):
case YY_STATE_EOF(SC_CmplCBEndB):
#line 114 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s.init(); return(token::EOSTATEMENT); }
	YY_BREAK
case YY_STATE_EOF(SC_Cmpl):
case YY_STATE_EOF(SC_CmplAM):
case YY_STATE_EOF(SC_ArrCast):
case YY_STATE_EOF(SC_Subsym):
case YY_STATE_EOF(SC_Position):
#line 115 "CMPL_Scanner.l"
{ yyterminate(); }
	YY_BREAK
/* cmpl keywords */
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 120 "CMPL_Scanner.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPublic;   yylval->s._name = "public";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 122 "CMPL_Scanner.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 122 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPrivate;  yylval->s._name = "private";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 124 "CMPL_Scanner.l"
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 124 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorLocal;    yylval->s._name = "local";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 126 "CMPL_Scanner.l"
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 126 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorConst;    yylval->s._name = "const";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 128 "CMPL_Scanner.l"
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 128 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorNew;      yylval->s._name = "new";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 130 "CMPL_Scanner.l"
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 130 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorExtern;   yylval->s._name = "extern";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 132 "CMPL_Scanner.l"
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 132 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorAssert;   yylval->s._name = "assert";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 134 "CMPL_Scanner.l"
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 134 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorDeclare;  yylval->s._name = "declare";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 136 "CMPL_Scanner.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 136 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorInitial;  yylval->s._name = "initial";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 138 "CMPL_Scanner.l"
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 138 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRef;      yylval->s._name = "ref";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 140 "CMPL_Scanner.l"
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 140 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorBreak;    yylval->s._name = "break";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 142 "CMPL_Scanner.l"
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 142 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorContinue; yylval->s._name = "continue"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 144 "CMPL_Scanner.l"
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 144 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRepeat;   yylval->s._name = "repeat";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 146 "CMPL_Scanner.l"
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 146 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorReturn;   yylval->s._name = "return";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 148 "CMPL_Scanner.l"
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 148 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorOrdered;  yylval->s._name = "ordered";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ORDERED); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 151 "CMPL_Scanner.l"
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 151 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "in"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_IN); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 153 "CMPL_Scanner.l"
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 153 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "of"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_OF); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 155 "CMPL_Scanner.l"
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 155 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "^T"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_TRANSPOSE); }
	YY_BREAK
/* symbols */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 158 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext, *yylloc, false, true, cmpl::markForSymbolNameNo));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  return(token::SYMBOL); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 162 "CMPL_Scanner.l"
{ cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : (yytext[0] == '@' ? cmpl::markForSymbolNameCB : cmpl::markForSymbolNameNo));
																	  yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, false, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() || mark != cmpl::markForSymbolNameNo ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  if (YY_START == SC_CmplAM && mark == cmpl::markForSymbolNameNo && yylval->s._u.exp->sym()->visible()) {
																		cmpl::SpecialSymbol spec = yylval->s._u.exp->sym()->special();
																		if (SPECIALSYMBOL_IS_MODIFICATOR(spec)) { return(SPECIALSYMBOL_IS_OBJTYPE(spec) ? token::SYMBOL_OBJTYPE : token::SYMBOL_DATATYPE); }
																	  }
																	  BEGIN(SC_Cmpl);
																	  return(token::SYMBOL);
																	}
	YY_BREAK
/* array cast */
case 49:
YY_RULE_SETUP
#line 175 "CMPL_Scanner.l"
{ BEGIN(SC_ArrCast); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::TUPLE_END); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "CMPL_Scanner.l"
{ /* possible array cast, return token::ARRCAST here, and unput the current char to be scanned again */
																	  BEGIN(SC_Cmpl); unput(*yytext); yylloc->columns(-1); yylval->s.init(); return(token::ARRCAST); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 178 "CMPL_Scanner.l"
{ /* no array cast, unput the current char to be scanned again */
																	  BEGIN(SC_Cmpl); unput(*yytext); yylloc->columns(-1); /*no return*/ }
	YY_BREAK
/* subsymbols */
case 52:
YY_RULE_SETUP
#line 182 "CMPL_Scanner.l"
{ BEGIN(SC_Subsym); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::SUBSYM_OP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 183 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : cmpl::markForSymbolNameNo);
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, true, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenDefSymbol);
																	  return(token::SUBSYMBOL); }
	YY_BREAK
/* linename prefix */
case 54:
YY_RULE_SETUP
#line 190 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = PARSE_CONTEXT.data()->globStrings()->store(yytext+1); return(token::LINENAME_PREF); }
	YY_BREAK
/* literals */
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER_MULT); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER_MULT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 196 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 197 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 199 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::STRING); }
	YY_BREAK
/* codeblock */
case 60:
YY_RULE_SETUP
#line 202 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._u.sptt = PARSE_CONTEXT.scanPrevTokenType();
																	  PARSE_CONTEXT.startScannerScopeLevel();
																	  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_BEGIN); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "CMPL_Scanner.l"
{ switch (PARSE_CONTEXT.endScannerScopeLevel(yylloc)) {
																	  	case cmpl::codeBlockExprModeStatementStart: BEGIN(SC_CmplCBEndA); break;
																		case cmpl::codeBlockExprModeCBBodyStart:    BEGIN(SC_CmplCBEndB); break;
																		default: BEGIN(SC_CmplAM); break;
																	  }
																	  yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_END); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 211 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_ALT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 213 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&+"; yylval->s._u.b = false;  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRef); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 214 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&";  yylval->s._u.b = true; PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRefPure); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 216 "CMPL_Scanner.l"
{ /* return token::EOSTATEMENT here, and unput the current char to be scanned again */
																	  if (*yytext != ';') { unput(*yytext); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); }
																	  BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* operator signs */
case 66:
YY_RULE_SETUP
#line 221 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ":=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 222 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "::="; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "+=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_ADD); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 224 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "-=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_SUB); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 225 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_MUL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 226 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "/=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_DIV); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 228 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "++"; yylval->s._u.i =  1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 229 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "--"; yylval->s._u.i = -1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 231 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._name = ":";	PARSE_CONTEXT.resetScanPrevTokenType();
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenColon); return(token::COLON); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 234 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "=";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 235 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "==";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ2); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 236 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 237 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE2); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 238 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 239 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 240 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 241 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 243 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&&";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_AND); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 244 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "||";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_OR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 245 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_NOT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 247 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "..";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::POINTS); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 248 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INTERSECT_RR); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "->";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OBJ_TO); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 252 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* other characters */
case 90:
YY_RULE_SETUP
#line 255 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 259 "CMPL_Scanner.l"
ECHO;
	YY_BREAK
#line 2427 "_CMPL_Scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 427 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 427 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 426);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 259 "CMPL_Scanner.l"


namespace cmpl
{
	/**
	 * Starts the scanner
	 */
	void CompilerContext::scanBegin()
	{
		// initialize the scanner
		yylex_init(&_scanner);
		cmplset_debug(_modp->traceScanning(), _scanner);

		GET_DATA(CmplSourceInput, inp);
		const char *buf = inp->contents().c_str();
		yy_scan_string (buf, _scanner);
	}

	/**
	 * Stops the scanner
	 */
	void CompilerContext::scanEnd()
	{
		// release scanner
		yylex_destroy(_scanner);
	}
}


