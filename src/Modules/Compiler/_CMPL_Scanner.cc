#line 1 "_CMPL_Scanner.cc"

#line 3 "_CMPL_Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define cmpl_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer cmpl_create_buffer
#endif

#ifdef yy_delete_buffer
#define cmpl_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer cmpl_delete_buffer
#endif

#ifdef yy_scan_buffer
#define cmpl_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer cmpl_scan_buffer
#endif

#ifdef yy_scan_string
#define cmpl_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string cmpl_scan_string
#endif

#ifdef yy_scan_bytes
#define cmpl_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes cmpl_scan_bytes
#endif

#ifdef yy_init_buffer
#define cmpl_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer cmpl_init_buffer
#endif

#ifdef yy_flush_buffer
#define cmpl_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer cmpl_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define cmpl_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state cmpl_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define cmpl_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer cmpl_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define cmplpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state cmplpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define cmplpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state cmplpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define cmplensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack cmplensure_buffer_stack
#endif

#ifdef yylex
#define cmpllex_ALREADY_DEFINED
#else
#define yylex cmpllex
#endif

#ifdef yyrestart
#define cmplrestart_ALREADY_DEFINED
#else
#define yyrestart cmplrestart
#endif

#ifdef yylex_init
#define cmpllex_init_ALREADY_DEFINED
#else
#define yylex_init cmpllex_init
#endif

#ifdef yylex_init_extra
#define cmpllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra cmpllex_init_extra
#endif

#ifdef yylex_destroy
#define cmpllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy cmpllex_destroy
#endif

#ifdef yyget_debug
#define cmplget_debug_ALREADY_DEFINED
#else
#define yyget_debug cmplget_debug
#endif

#ifdef yyset_debug
#define cmplset_debug_ALREADY_DEFINED
#else
#define yyset_debug cmplset_debug
#endif

#ifdef yyget_extra
#define cmplget_extra_ALREADY_DEFINED
#else
#define yyget_extra cmplget_extra
#endif

#ifdef yyset_extra
#define cmplset_extra_ALREADY_DEFINED
#else
#define yyset_extra cmplset_extra
#endif

#ifdef yyget_in
#define cmplget_in_ALREADY_DEFINED
#else
#define yyget_in cmplget_in
#endif

#ifdef yyset_in
#define cmplset_in_ALREADY_DEFINED
#else
#define yyset_in cmplset_in
#endif

#ifdef yyget_out
#define cmplget_out_ALREADY_DEFINED
#else
#define yyget_out cmplget_out
#endif

#ifdef yyset_out
#define cmplset_out_ALREADY_DEFINED
#else
#define yyset_out cmplset_out
#endif

#ifdef yyget_leng
#define cmplget_leng_ALREADY_DEFINED
#else
#define yyget_leng cmplget_leng
#endif

#ifdef yyget_text
#define cmplget_text_ALREADY_DEFINED
#else
#define yyget_text cmplget_text
#endif

#ifdef yyget_lineno
#define cmplget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno cmplget_lineno
#endif

#ifdef yyset_lineno
#define cmplset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno cmplset_lineno
#endif

#ifdef yyget_column
#define cmplget_column_ALREADY_DEFINED
#else
#define yyget_column cmplget_column
#endif

#ifdef yyset_column
#define cmplset_column_ALREADY_DEFINED
#else
#define yyset_column cmplset_column
#endif

#ifdef yywrap
#define cmplwrap_ALREADY_DEFINED
#else
#define yywrap cmplwrap
#endif

/* %endif */

#ifdef yyget_lval
#define cmplget_lval_ALREADY_DEFINED
#else
#define yyget_lval cmplget_lval
#endif

#ifdef yyset_lval
#define cmplset_lval_ALREADY_DEFINED
#else
#define yyset_lval cmplset_lval
#endif

#ifdef yyget_lloc
#define cmplget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc cmplget_lloc
#endif

#ifdef yyset_lloc
#define cmplset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc cmplset_lloc
#endif

#ifdef yyalloc
#define cmplalloc_ALREADY_DEFINED
#else
#define yyalloc cmplalloc
#endif

#ifdef yyrealloc
#define cmplrealloc_ALREADY_DEFINED
#else
#define yyrealloc cmplrealloc
#endif

#ifdef yyfree
#define cmplfree_ALREADY_DEFINED
#else
#define yyfree cmplfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define cmplwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[532] =
    {   0,
        7,    7,   89,   88,    8,   88,    9,   88,   10,   88,
       10,   88,   87,   88,    8,   87,   88,   82,   87,   88,
       87,   88,   10,   87,   88,   48,   87,   88,16431,   61,
       87,   88,   87,   88,   87,   88,   87,   88,   49,   87,
       88,   87,   88,   54,   55,   87,   88,16436,16437,   71,
       87,   88,   86,   87,   88,   76,   87,   88,   72,   87,
       88,   77,   87,   88,   87,   88,   46,   48,   87,   88,
    16429,16431,   87,   88,   87,   88,   48,   87,   88,16431,
       48,   87,   88,16431,   48,   87,   88,16431,   48,   87,
       88,16431,   48,   87,   88,16431,   48,   87,   88,16431,

       48,   87,   88,16431,   48,   87,   88,16431,   48,   87,
       88,16431,   48,   87,   88,16431,   48,   87,   88,16431,
       57,   87,   88,   59,   87,   88,   58,   87,   88,   10,
       87,   88,   62,   88,    8,   62,   88,   10,   62,   88,
       49,   62,   88,   10,   62,   88,   59,   62,   88,   58,
       62,   88,   50,   87,   88,   87,   88,   87,   88,   87,
       88,    7,   88,    7,    8,   88,    6,    9,   88,    7,
       10,   88,    7,   88,    7,   88,    7,   88,    7,   88,
        7,   10,   88,    8,    9,   10,   10,   75,   56, 8239,
       48,16431,   80,   60,   67,   84,   69,   65,   70,   66,

       85,   83,   55,16437,   68, 8244, 8245,   54,   55,16436,
    16437, 8244, 8245,   63,   78,   74,   73,   79,   48, 8237,
     8239,   46,16429,   51,   48,16431,   48,16431,   48,16431,
       48,16431,   48,16431,   42,   48,16431,   48,16431,   48,
    16431,   44,   48,16431,   48,16431,   48,16431,   48,16431,
       48,16431,   81,   50,   50,    7,    7,    8,    6,    9,
        7,   10,    7,    7,    7,    7,    7,   10,   10,   10,
       10,   10,   56, 8245, 8245,   55,16437,   64,   48, 8237,
       51,   48,16431,   48,16431,   48,16431,   48,16431,   48,
    16431,   41, 8239,   48,16431,   48,16431,   20,   48,16431,

       43, 8239,   48,16431,   48,16431,   48,16431,   30,   48,
    16431,   48,16431,   48,16431,    7,    7,    7,    7,    7,
       10,    7,   10,    7,   10,    7,   10,   10,   10,   10,
       10,   48,16431,   48,16431,   48,16431,   48,16431,   48,
    16431,   48,16431,   48,16431,   48,16431,   19, 8239,   48,
    16431,   48,16431,   48,16431,   29, 8239,   48,16431,   48,
    16431,    5,    7,    7,    7,    7,    7,   10,    7,   10,
        7,   10,    7,   10,   10,   10,   10,   10,   48,16431,
       32,   48,16431,   18,   48,16431,   48,16431,   48,16431,
       48,16431,   48,16431,   16,   48,16431,   48,16431,   48,

    16431,   48,16431,   48,16431,   48,16431,    5,    7,    7,
        4,    7,    7,    7,   10,    7,   10,    7,   10,    7,
       10,    1,   10,   10,   10,   24,   48,16431,   31, 8239,
       17, 8239,   48,16431,   48,16431,   22,   48,16431,   48,
    16431,   15, 8239,   48,16431,   48,16431,   12,   48,16431,
       36,   48,16431,   38,   48,16431,    7,    4,    7,    7,
        1,    7,   10,    7,   10,    7,   10,    1,   10,   10,
       10,   23, 8239,   48,16431,   26,   48,16431,   21, 8239,
       28,   48,16431,   40,   48,16431,   14,   48,16431,   11,
     8239,   35, 8239,   37, 8239,    2,    7,    7,    1,    7,

       10,    7,   10,    7,   10,   10,   34,   48,16431,   25,
     8239,   27, 8239,   39, 8239,   13, 8239,    2,    7,    7,
        7,   10,   10,   33, 8239,    3,    7,    7,   10,    3,
        7
    } ;

static const flex_int16_t yy_accept[306] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   11,
       13,   15,   18,   21,   23,   26,   30,   33,   35,   37,
       39,   42,   44,   50,   53,   56,   59,   62,   65,   67,
       73,   75,   77,   81,   85,   89,   93,   97,  101,  105,
      109,  113,  117,  121,  124,  127,  130,  133,  135,  138,
      141,  144,  147,  150,  153,  156,  158,  160,  162,  164,
      167,  170,  173,  175,  177,  179,  181,  184,  185,  186,
      187,  188,  189,  189,  190,  190,  190,  191,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  205,

      206,  206,  208,  208,  212,  214,  214,  215,  216,  217,
      218,  219,  220,  220,  222,  224,  225,  227,  229,  231,
      233,  235,  238,  240,  242,  245,  247,  249,  251,  253,
      254,  255,  256,  257,  259,  261,  263,  264,  265,  266,
      267,  269,  270,  271,  272,  273,  274,  274,  275,  276,
      276,  278,  279,  280,  280,  281,  282,  284,  286,  288,
      290,  292,  292,  294,  296,  298,  301,  301,  303,  305,
      307,  309,  312,  314,  316,  317,  318,  319,  320,  322,
      324,  326,  328,  329,  330,  331,  332,  334,  336,  338,
      340,  342,  344,  346,  348,  348,  350,  352,  354,  356,

      356,  358,  360,  362,  364,  365,  366,  367,  369,  371,
      373,  375,  376,  377,  378,  379,  381,  384,  387,  389,
      391,  393,  395,  398,  400,  402,  404,  406,  408,  410,
      411,  413,  414,  416,  418,  420,  422,  424,  425,  426,
      429,  429,  431,  431,  433,  435,  437,  440,  442,  442,
      444,  446,  448,  451,  454,  457,  458,  460,  461,  464,
      466,  468,  470,  471,  472,  472,  474,  476,  479,  479,
      481,  484,  487,  490,  490,  492,  492,  494,  494,  496,
      498,  499,  502,  504,  506,  507,  510,  510,  512,  512,
      514,  514,  516,  516,  518,  520,  521,  523,  524,  524,

      526,  528,  530,  532,  532
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,    1,   10,
        1,   11,   12,    1,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,   22,   23,   23,   24,   25,   26,   23,
       23,   23,   23,   23,   23,   27,   23,   23,   23,   28,
       23,   23,   29,   30,   23,   23,   23,   23,   23,   23,
       10,   31,    1,   32,   23,   33,   34,   35,   36,   37,

       38,   39,   23,   23,   40,   23,   41,   42,   23,   43,
       44,   45,   23,   46,   47,   48,   49,   50,   51,   52,
       23,   23,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    5,
        1,    1,    1,    6,    1,    7,    1,    1,    1,    1,
        1,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    1,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    5,    1,    1
    } ;

static const flex_int16_t yy_base[327] =
    {   0,
        0,    2,    9,  735,    0,  734,   63,   65,   71,   73,
      128,  731,  182,  228,  737,  929,  734,  726,    0,  717,
      929,  721,  702,   63,    0,  184,   72,   62,   76,   77,
       75,  690,  188,   75,  929,   79,  689,  688,    0,  193,
      673,    0,  213,  230,  218,  239,  270,  283,  286,  295,
      298,   62,   64,  929,  646,  929,  692,  929,  694,    0,
      929,  675,  929,  929,    0,  664,  662,    0,    0,  670,
      643,    0,  592,  592,  581,  558,  595,  595,  593,    0,
      282,  929,   87,  929,  194,  310,  929,   66,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  265,  929,

      338,  929,  572,  343,  101,  567,  929,  929,  929,  929,
      929,    0,  358,  929,  362,    0,   76,  212,  162,   70,
      199,  372,  289,  292,  375,  217,  310,  345,  344,  929,
        0,    0,    0,  583,  579,    0,  527,  526,  520,  519,
      371,  508,  506,  493,  482,  230,  400,  929,  108,  512,
      417,  929,    0,  384,  929,    0,  371,  388,  384,  396,
      401,  441,  929,  402,  390,  450,  453,  929,  420,  271,
      422,  467,  434,  435,  510,   44,  478,  467,  457,  461,
      448,  431,  436,  428,  422,  428,  288,  360,  437,  447,
      456,  436,  452,  458,  505,  929,  450,  471,  472,  519,

      929,  480,  485,    0,  405,  429,  378,  372,  366,  354,
      359,  356,   77,  333,  324,  486,  533,  536,  502,  503,
      508,  516,  557,  518,  527,  532,  531,  537,    0,  331,
        0,  165,  341,  171,  317,  307,    0,  288,  268,  588,
      591,  929,  601,  929,  535,  561,  610,  576,  621,  929,
      580,  570,  625,  630,  635,  298,    0,  260,    0,  250,
      236,    0,  246,  199,  645,  929,  604,  649,  654,  929,
      658,  663,  667,  677,  929,  682,  929,  687,  929,    0,
      232,    0,  223,  250,  204,  691,  702,  929,  711,  929,
      715,  929,  724,  929,    0,  222,  168,  152,  729,  929,

        0,   60,    0,  929,  782,  790,  798,  806,  814,  821,
      828,  833,  838,  840,  845,  853,  861,  868,  870,  872,
      880,  888,  896,  904,  912,  920
    } ;

static const flex_int16_t yy_def[327] =
    {   0,
      305,  305,  304,    3,    3,    3,  306,  306,  306,  306,
      304,   11,  307,  307,  304,  304,  304,  304,  308,  308,
      304,  304,  304,  309,  308,  310,  304,  304,  304,  304,
      304,  304,  311,  304,  304,  304,  304,  304,  312,  310,
      304,  313,  310,  310,  310,  310,  310,  310,  310,  310,
      310,   51,   51,  304,  304,  304,  308,  304,  304,  308,
      304,  308,  304,  304,  314,  304,  304,  315,  316,  316,
      304,  317,  316,  316,  316,  316,  317,  304,  304,  308,
      308,  304,  309,  304,  309,  304,  304,   51,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  318,  304,

      311,  304,  304,  311,  304,  304,  304,  304,  304,  304,
      304,  319,  304,  304,  304,  320,   51,   51,   51,   51,
       51,  310,   51,   51,  310,   51,   51,   51,   51,  304,
      314,  314,  316,  316,  304,  317,  316,  316,  316,  316,
      317,  308,  308,  308,  308,  309,  318,  304,  304,  304,
      318,  304,  319,  304,  304,  320,   51,   51,   51,   51,
       51,  304,  304,   51,   51,  310,  304,  304,   51,   51,
       51,  310,   51,   51,  316,  316,  316,  316,  317,  317,
      317,  317,  308,  308,  308,  308,   51,   51,   51,   51,
       51,   51,   51,   51,  304,  304,   51,   51,   51,  304,

      304,   51,   51,  321,  316,  316,  316,  317,  317,  317,
      317,  308,  308,  308,  308,   51,  310,  310,   51,   51,
       51,   51,  310,   51,   51,   51,   51,   51,  321,  316,
      322,  316,  317,  317,  317,  317,  323,  308,  308,  310,
      304,  304,  304,  304,   51,   51,  310,   51,  304,  304,
       51,   51,  310,  310,  310,  316,  322,  316,  324,  317,
      317,  323,  308,  308,  304,  304,   51,  310,  304,  304,
      310,  310,  310,  304,  304,  304,  304,  304,  304,  325,
      316,  324,  317,  317,  308,  310,  304,  304,  304,  304,
      304,  304,  304,  304,  325,  316,  317,  308,  304,  304,

      326,  317,  326,    0,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304
    } ;

static const flex_int16_t yy_nxt[985] =
    {   0,
      304,   17,   18,   17,   18,  304,   19,  304,   20,   21,
       22,   18,   21,   23,   24,   25,   26,   27,   21,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   26,   26,   26,   26,   26,   26,   26,   40,   39,
       41,   42,   43,   44,   45,   46,   47,   26,   48,   26,
       49,   50,   51,   52,   53,   26,   26,   26,   26,   26,
       26,   54,   55,   56,   59,   18,   59,   18,   84,   60,
      205,   62,   59,   18,   59,   18,   61,   60,   61,   62,
       89,   91,   92,   90,   61,  205,   61,   93,   98,   95,
       99,  106,   84,   85,  107,   94,   96,   97,  108,  109,

       88,  129,   88,  238,   88,  160,  233,  127,   88,   88,
      128,   88,  150,  150,   88,   88,  151,   85,  238,  150,
      150,   88,  157,  151,   63,   64,   63,   64,   21,   22,
       18,   21,   21,   21,   25,   65,   21,   21,   21,   66,
       67,   21,   21,   21,   21,   35,   21,   21,   21,   21,
       65,   65,   65,   65,   65,   65,   65,   65,   68,   21,
       21,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       21,   21,   56,   70,   71,   86,   86,   86,   72,  101,
      101,  101,  258,   87,  113,  113,  113,  260,  212,  146,

       88,  103,  114,  104,  159,   73,   74,   88,   75,  258,
       76,  302,  260,  105,   86,   86,   86,   73,   74,   86,
       86,   86,   87,   75,   85,  105,  285,   87,   76,   70,
       71,   86,   86,   86,   77,   84,   87,   88,  301,   87,
       86,   86,   86,  285,   88,  114,  161,  298,   87,  158,
       88,   73,   74,  169,   75,   88,   76,   88,  233,  117,
       85,  119,   88,   73,   74,   87,  147,  147,  147,   75,
       87,   86,   86,   86,   76,  118,  120,  297,  296,   87,
       99,  212,   87,  284,   86,   86,   86,   86,   86,   86,
      149,   87,   87,  283,  297,   87,   86,   86,   86,   86,

       86,   86,  149,  281,   87,  142,  143,   87,  144,   88,
      145,   86,   86,   86,  280,  264,   88,  142,  143,   87,
      198,  121,   87,  144,  165,  122,   88,   88,  145,  123,
       88,  263,  124,  216,   88,   87,  125,   88,   87,  101,
      101,  101,  166,  126,  101,  101,  101,   87,   88,  170,
       87,  304,  261,  304,  233,   88,  103,  259,  104,  113,
      113,  113,   87,  154,  154,  154,  256,  114,  105,  239,
      212,  155,  237,  162,  162,  162,  167,  167,  167,  171,
      105,  163,  172,   88,  168,  154,  154,  154,  173,   88,
       88,  174,  236,  155,  179,  180,  235,  181,   88,  182,

      217,  147,  147,  147,  234,   88,  179,  180,  187,   88,
      114,  164,  181,  233,  155,  304,   88,  182,  147,  147,
      147,  188,   88,  194,  163,  232,   88,  168,   88,   88,
      189,  190,  151,   88,   88,   88,  155,  191,  192,   88,
       88,   88,  162,  162,  162,  231,   88,   88,  230,  193,
      163,  195,  195,  195,  167,  167,  167,  197,   88,  196,
       88,  215,  168,  199,  214,   88,  213,   88,  200,  200,
      200,  202,   88,   88,   88,   88,  201,  212,  211,   88,
       88,  221,   88,  203,  218,   88,  219,  210,   88,  220,
       88,  222,   88,  163,   88,  224,   88,   88,  209,  223,

      208,   88,  196,   88,  225,  168,  195,  195,  195,   88,
       88,  226,  207,  227,  196,  206,   88,   88,   88,  201,
      200,  200,  200,   88,   88,   88,  204,  151,  201,  186,
      228,   88,  185,  240,  241,  241,  241,  243,  243,  243,
       88,   88,  242,  184,  245,  244,   88,   88,  246,  248,
      247,  183,  178,   88,   88,  251,   88,  196,  249,  249,
      249,   88,  177,   88,  176,   88,  250,  253,  175,   88,
       88,  201,   88,   88,  252,   88,   88,   88,  254,  255,
       88,  135,   88,  267,  134,  242,  152,   99,  244,  265,
      265,  265,  241,  241,  241,   79,   78,  266,  268,   88,

      242,  141,  243,  243,  243,  140,   88,  273,   88,  250,
      244,  269,  269,  269,   88,   88,  272,  271,   88,  270,
      139,   88,  249,  249,  249,   88,  274,  274,  274,  138,
      250,  276,  276,  276,  275,  137,  278,  278,  278,  277,
      266,  286,   88,  242,  279,  135,  265,  265,  265,   88,
      287,  287,  287,  244,  266,  269,  269,  269,  288,  289,
      289,  289,  270,  270,  291,  291,  291,  290,  293,  293,
      293,  134,  292,  250,   95,   93,  294,  275,  274,  274,
      274,   81,  277,  276,  276,  276,  275,  279,  278,  278,
      278,  277,  299,  299,  299,   78,  279,  266,   81,  130,

      300,  288,  115,  287,  287,  287,  270,  111,  110,  100,
      290,  288,  289,  289,  289,  292,  291,  291,  291,  294,
      290,   82,   78,   81,  292,  293,  293,  293,   79,  275,
      299,  299,  299,  294,  277,   78,  304,   57,  300,  279,
       57,   57,  304,  300,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  288,  304,  304,  304,  304,  304,
      304,  304,  304,  290,  304,  304,  304,  292,  304,  304,
      304,  304,  304,  304,  304,  304,  294,  304,  304,  304,
      304,  300,   16,   16,   16,   16,   16,   16,   16,   16,
       58,   58,   58,   58,   58,   58,   58,   58,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,  304,   80,
       80,   80,   80,   80,   83,   83,  304,   83,   83,   83,
       83,   83,   88,   88,  304,   88,  304,   88,   88,  102,
      102,  102,  304,  102,  102,  102,  112,  304,  304,  304,
      112,  116,  304,  304,  304,  116,  131,  131,  132,  304,
      304,  304,  132,  133,  133,  304,  133,  133,  133,  133,
      133,  136,  136,  304,  136,  136,  136,  136,  136,  148,
      148,  148,  304,  304,  148,  148,  153,  153,  156,  156,
      229,  229,  304,  229,  229,  229,  229,  229,  257,  257,
      304,  257,  257,  257,  257,  257,  262,  262,  304,  262,

      262,  262,  262,  262,  282,  282,  304,  282,  282,  282,
      282,  282,  295,  295,  304,  295,  295,  295,  295,  295,
      303,  303,  304,  303,  303,  303,  303,  303,   15,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304
    } ;

static const flex_int16_t yy_chk[985] =
    {   0,
        0,    1,    1,    2,    2,    0,    1,    0,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   24,    7,
      176,    8,    9,    9,   10,   10,    7,    9,    8,   10,
       27,   28,   28,   27,    9,  176,   10,   29,   31,   30,
       31,   34,   83,   24,   34,   29,   30,   30,   36,   36,

       52,   53,   53,  213,   88,  120,  302,   52,  120,   53,
       52,   88,  105,  105,  117,  120,  105,   83,  213,  149,
      149,  117,  117,  149,    9,    9,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   26,   26,   26,   13,   33,
       33,   33,  232,   26,   40,   40,   40,  234,  298,   85,

      119,   33,   40,   33,  119,   13,   13,  119,   13,  232,
       13,  297,  234,   33,   43,   43,   43,   13,   13,   45,
       45,   45,   43,   13,   85,   33,  264,   45,   13,   14,
       14,   44,   44,   44,   14,  146,   26,  121,  296,   44,
       46,   46,   46,  264,  121,   40,  121,  285,   46,  118,
      118,   14,   14,  126,   14,  126,   14,  118,  283,   43,
      146,   45,  126,   14,   14,   43,   99,   99,   99,   14,
       45,   47,   47,   47,   14,   44,   46,  284,  281,   47,
       99,  263,   44,  261,   48,   48,   48,   49,   49,   49,
       99,   46,   48,  260,  284,   49,   50,   50,   50,   51,

       51,   51,   99,  258,   50,   81,   81,   51,   81,  170,
       81,   86,   86,   86,  256,  239,  170,   81,   81,   86,
      170,   47,   47,   81,  123,   48,  187,  123,   81,   49,
      124,  238,   50,  187,  123,   48,   51,  124,   49,  101,
      101,  101,  124,   51,  104,  104,  104,   50,  127,  127,
       51,  101,  236,  101,  235,  127,  104,  233,  104,  113,
      113,  113,   86,  115,  115,  115,  230,  113,  104,  215,
      214,  115,  212,  122,  122,  122,  125,  125,  125,  128,
      104,  122,  129,  128,  125,  154,  154,  154,  129,  129,
      128,  129,  211,  154,  141,  141,  210,  141,  188,  141,

      188,  147,  147,  147,  209,  188,  141,  141,  157,  157,
      113,  122,  141,  208,  115,  147,  157,  141,  151,  151,
      151,  158,  159,  165,  122,  207,  158,  125,  165,  159,
      159,  159,  151,  158,  160,  165,  154,  160,  161,  161,
      164,  160,  162,  162,  162,  206,  161,  164,  205,  164,
      162,  166,  166,  166,  167,  167,  167,  169,  169,  166,
      171,  186,  167,  171,  185,  169,  184,  171,  172,  172,
      172,  173,  173,  174,  192,  189,  172,  183,  182,  173,
      174,  192,  189,  174,  189,  190,  190,  181,  197,  191,
      193,  193,  190,  162,  191,  197,  194,  193,  180,  194,

      179,  191,  166,  194,  198,  167,  195,  195,  195,  198,
      199,  199,  178,  202,  195,  177,  198,  199,  202,  172,
      200,  200,  200,  203,  216,  202,  175,  150,  200,  145,
      203,  216,  144,  216,  217,  217,  217,  218,  218,  218,
      219,  220,  217,  143,  219,  218,  221,  219,  220,  222,
      221,  142,  140,  221,  222,  224,  224,  195,  223,  223,
      223,  222,  139,  224,  138,  225,  223,  226,  137,  227,
      226,  200,  225,  245,  225,  228,  227,  226,  227,  228,
      245,  135,  228,  245,  134,  217,  106,  103,  218,  240,
      240,  240,  241,  241,  241,   79,   78,  240,  246,  246,

      241,   77,  243,  243,  243,   76,  246,  252,  252,  223,
      243,  247,  247,  247,  248,  252,  251,  248,  251,  247,
       75,  248,  249,  249,  249,  251,  253,  253,  253,   74,
      249,  254,  254,  254,  253,   73,  255,  255,  255,  254,
      240,  267,  267,  241,  255,   71,  265,  265,  265,  267,
      268,  268,  268,  243,  265,  269,  269,  269,  268,  271,
      271,  271,  247,  269,  272,  272,  272,  271,  273,  273,
      273,   70,  272,  249,   67,   66,  273,  253,  274,  274,
      274,   62,  254,  276,  276,  276,  274,  255,  278,  278,
      278,  276,  286,  286,  286,   59,  278,  265,   57,   55,

      286,  268,   41,  287,  287,  287,  269,   38,   37,   32,
      271,  287,  289,  289,  289,  272,  291,  291,  291,  273,
      289,   23,   22,   20,  291,  293,  293,  293,   18,  274,
      299,  299,  299,  293,  276,   17,   15,   12,  299,  278,
        6,    4,    0,  286,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  287,    0,    0,    0,    0,    0,
        0,    0,    0,  289,    0,    0,    0,  291,    0,    0,
        0,    0,    0,    0,    0,    0,  293,    0,    0,    0,
        0,  299,  305,  305,  305,  305,  305,  305,  305,  305,
      306,  306,  306,  306,  306,  306,  306,  306,  307,  307,

      307,  307,  307,  307,  307,  307,  308,  308,    0,  308,
      308,  308,  308,  308,  309,  309,    0,  309,  309,  309,
      309,  309,  310,  310,    0,  310,    0,  310,  310,  311,
      311,  311,    0,  311,  311,  311,  312,    0,    0,    0,
      312,  313,    0,    0,    0,  313,  314,  314,  315,    0,
        0,    0,  315,  316,  316,    0,  316,  316,  316,  316,
      316,  317,  317,    0,  317,  317,  317,  317,  317,  318,
      318,  318,    0,    0,  318,  318,  319,  319,  320,  320,
      321,  321,    0,  321,  321,  321,  321,  321,  322,  322,
        0,  322,  322,  322,  322,  322,  323,  323,    0,  323,

      323,  323,  323,  323,  324,  324,    0,  324,  324,  324,
      324,  324,  325,  325,    0,  325,  325,  325,  325,  325,
      326,  326,    0,  326,  326,  326,  326,  326,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static const flex_int16_t yy_rule_linenum[88] =
    {   0,
       94,   96,   97,   98,   99,  101,  102,  106,  107,  110,
      117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
      148,  149,  150,  151,  152,  153,  156,  160,  173,  174,
      181,  184,  185,  187,  188,  190,  193,  196,  202,  204,
      205,  207,  212,  213,  214,  215,  216,  217,  219,  220,
      222,  225,  226,  227,  228,  229,  230,  231,  232,  234,
      235,  236,  238,  239,  241,  243,  246
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CMPL_Scanner.l"
/***********************************************************************
 *  This code is part of CMPL
 *
 *  Copyright (C) 2007, 2008, 2009, 2010, 2011 Thomas Schleiff - Halle(Saale), 
 *  Germany and Mike Steglich - Technical University of Applied Sciences
 *  Wildau, Germany 
 *
 *  Coliop3 and CMPL are projects of the Technical University of 
 *  Applied Sciences Wildau and the Institute for Operations Research 
 *  and Business Management at the Martin Luther University 
 *  Halle-Wittenberg.
 *  Please visit the project homepage <www.coliop.org>
 * 
 *  CMPL is free software; you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 3 of the License, or 
 *  (at your option) any later version.
 * 
 *  CMPL is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 *  License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 ***********************************************************************/
#line 31 "CMPL_Scanner.l"
#include "CompilerContext.hh"


/* By default yylex returns int, we use token_type.
Unfortunately yyterminate by default returns 0, which is
not of token_type.  */
#define yyterminate() return token::END

// scanner uses YYSTYPE and YYLTYPE, but parser yy::Cmpl_Parser::semantic_type and yy::Cmpl_Parser::location_type
#define YYSTYPE cmpl::CMPL_Parser::semantic_type
#define YYLTYPE cmpl::CMPL_Parser::location_type

// handle locations
#define YY_USER_ACTION  yylloc->step(); yylloc->columns(yyleng);

// cmpl main object
#define glvar PARSE_CONTEXT.glvar

typedef cmpl::CMPL_Parser::token token;
int prevSC;
#line 1218 "_CMPL_Scanner.cc"
/*%option ansi-prototypes*/
#line 63 "CMPL_Scanner.l"
	/* Scanner states */
		/* standard cmpl state */

		/* scan cmpl input, possible assign modifier or directive */

		/* after end of a codeblock: insert semicolon */

		/* after end of a codeblock: insert semicolon but not if '}' follow */

		/* cmpl subsymbol expected */

		/* position mark */

#line 1234 "_CMPL_Scanner.cc"

#define INITIAL 0
#define SC_Cmpl 1
#define SC_CmplAM 2
#define SC_CmplCBEndA 3
#define SC_CmplCBEndB 4
#define SC_Subsym 5
#define SC_Position 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 83 "CMPL_Scanner.l"


	/* set initial scanner state */
	{
		if (YY_START == 0) {
			BEGIN(SC_CmplAM);
		}
	}


    /* position marks */
#line 1624 "_CMPL_Scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 305 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 929 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 88 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 88 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 89 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "CMPL_Scanner.l"
{ PARSE_CONTEXT.setScanModeRestore(YY_START); BEGIN(SC_Position); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 96 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseDefLocPM(yylloc, yytext+7); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 97 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseStartPosPM(yylloc, yytext+9); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseLinePM(yylloc, yytext+5); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 99 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseColPM(yylloc, yytext+4); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 101 "CMPL_Scanner.l"
{ BEGIN(PARSE_CONTEXT.scanModeRestore()); yylloc->lines(yyleng-1); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 102 "CMPL_Scanner.l"
{ PARSE_CONTEXT.outErrorPositionMark(yylloc, yytext); }
	YY_BREAK
/* Whitespaces */
case 8:
YY_RULE_SETUP
#line 106 "CMPL_Scanner.l"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 107 "CMPL_Scanner.l"
{ yylloc->lines(yyleng); }
	YY_BREAK
/* comments (only line comments starting with '#' are allowed here (the precompiler must handle c comments and c++ comments) */
case 10:
YY_RULE_SETUP
#line 110 "CMPL_Scanner.l"
;
	YY_BREAK
case YY_STATE_EOF(SC_CmplCBEndA):
case YY_STATE_EOF(SC_CmplCBEndB):
#line 112 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s.init(); return(token::EOSTATEMENT); }
	YY_BREAK
case YY_STATE_EOF(SC_Cmpl):
case YY_STATE_EOF(SC_CmplAM):
case YY_STATE_EOF(SC_Subsym):
case YY_STATE_EOF(SC_Position):
#line 113 "CMPL_Scanner.l"
{ yyterminate(); }
	YY_BREAK
/* cmpl keywords */
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 118 "CMPL_Scanner.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 118 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPublic;   yylval->s._name = "public";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 120 "CMPL_Scanner.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 120 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPrivate;  yylval->s._name = "private";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 122 "CMPL_Scanner.l"
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 122 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorLocal;    yylval->s._name = "local";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 124 "CMPL_Scanner.l"
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 124 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorConst;    yylval->s._name = "const";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 126 "CMPL_Scanner.l"
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 126 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorNew;      yylval->s._name = "new";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 128 "CMPL_Scanner.l"
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 128 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorExtern;   yylval->s._name = "extern";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 130 "CMPL_Scanner.l"
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 130 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorAssert;   yylval->s._name = "assert";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 132 "CMPL_Scanner.l"
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 132 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorDeclare;  yylval->s._name = "declare";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 134 "CMPL_Scanner.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 134 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorInitial;  yylval->s._name = "initial";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 136 "CMPL_Scanner.l"
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 136 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRef;      yylval->s._name = "ref";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 138 "CMPL_Scanner.l"
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 138 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorBreak;    yylval->s._name = "break";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 140 "CMPL_Scanner.l"
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 140 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorContinue; yylval->s._name = "continue"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 142 "CMPL_Scanner.l"
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 142 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRepeat;   yylval->s._name = "repeat";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 144 "CMPL_Scanner.l"
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 144 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorReturn;   yylval->s._name = "return";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 146 "CMPL_Scanner.l"
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 146 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorOrdered;  yylval->s._name = "ordered";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ORDERED); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 149 "CMPL_Scanner.l"
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 149 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "in"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_IN); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 151 "CMPL_Scanner.l"
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 151 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "of"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_OF); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
#line 153 "CMPL_Scanner.l"
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 153 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "^T"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_TRANSPOSE); }
	YY_BREAK
/* symbols */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 156 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext, *yylloc, false, true, cmpl::markForSymbolNameNo));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  return(token::SYMBOL); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 160 "CMPL_Scanner.l"
{ cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : (yytext[0] == '@' ? cmpl::markForSymbolNameCB : cmpl::markForSymbolNameNo));
																	  yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, false, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() || mark != cmpl::markForSymbolNameNo ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  if (YY_START == SC_CmplAM && mark == cmpl::markForSymbolNameNo && yylval->s._u.exp->sym()->visible()) {
																		cmpl::SpecialSymbol spec = yylval->s._u.exp->sym()->special();
																		if (SPECIALSYMBOL_IS_MODIFICATOR(spec)) { return(SPECIALSYMBOL_IS_OBJTYPE(spec) ? token::SYMBOL_OBJTYPE : token::SYMBOL_DATATYPE); }
																	  }
																	  BEGIN(SC_Cmpl);
																	  return(token::SYMBOL);
																	}
	YY_BREAK
/* subsymbols */
case 49:
YY_RULE_SETUP
#line 173 "CMPL_Scanner.l"
{ BEGIN(SC_Subsym); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::SUBSYM_OP); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 174 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : cmpl::markForSymbolNameNo);
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, true, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenDefSymbol);
																	  return(token::SUBSYMBOL); }
	YY_BREAK
/* linename prefix */
case 51:
YY_RULE_SETUP
#line 181 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = PARSE_CONTEXT.data()->globStrings()->store(yytext+1); return(token::LINENAME_PREF); }
	YY_BREAK
/* literals */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER_MULT); }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER_MULT); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 187 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 188 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 190 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::STRING); }
	YY_BREAK
/* codeblock */
case 57:
YY_RULE_SETUP
#line 193 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._u.sptt = PARSE_CONTEXT.scanPrevTokenType();
																	  PARSE_CONTEXT.startScannerScopeLevel();
																	  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_BEGIN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 196 "CMPL_Scanner.l"
{ switch (PARSE_CONTEXT.endScannerScopeLevel(yylloc)) {
																	  	case cmpl::codeBlockExprModeStatementStart: BEGIN(SC_CmplCBEndA); break;
																		case cmpl::codeBlockExprModeCBBodyStart:    BEGIN(SC_CmplCBEndB); break;
																		default: BEGIN(SC_CmplAM); break;
																	  }
																	  yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_END); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 202 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_ALT); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 204 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&+"; yylval->s._u.b = false;  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRef); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&";  yylval->s._u.b = true; PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRefPure); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 207 "CMPL_Scanner.l"
{ /* return token::EOSTATEMENT here, and unput the current char to be scanned again */
																	  if (*yytext != ';') { unput(*yytext); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); }
																	  BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* operator signs */
case 63:
YY_RULE_SETUP
#line 212 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ":=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 213 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "::="; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 214 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "+=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_ADD); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 215 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "-=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_SUB); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 216 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_MUL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 217 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "/=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_DIV); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 219 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "++"; yylval->s._u.i =  1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 220 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "--"; yylval->s._u.i = -1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 222 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._name = ":";	PARSE_CONTEXT.resetScanPrevTokenType();
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenColon); return(token::COLON); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 225 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "=";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 226 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "==";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ2); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 227 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 228 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE2); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 229 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 230 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 231 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 232 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 234 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&&";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_AND); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 235 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "||";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_OR); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 236 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_NOT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 238 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "..";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::POINTS); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 239 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INTERSECT_RR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 241 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "->";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OBJ_TO); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 243 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* other characters */
case 87:
YY_RULE_SETUP
#line 246 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "CMPL_Scanner.l"
ECHO;
	YY_BREAK
#line 2287 "_CMPL_Scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 305 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 305 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 304);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 250 "CMPL_Scanner.l"


namespace cmpl
{
	/**
	 * Starts the scanner
	 */
	void CompilerContext::scanBegin()
	{
		// initialize the scanner
		yylex_init(&_scanner);
		cmplset_debug(_modp->traceScanning(), _scanner);

		GET_DATA(CmplSourceInput, inp);
		const char *buf = inp->contents().c_str();
		yy_scan_string (buf, _scanner);
	}

	/**
	 * Stops the scanner
	 */
	void CompilerContext::scanEnd()
	{
		// release scanner
		yylex_destroy(_scanner);
	}
}


